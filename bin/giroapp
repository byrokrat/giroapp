#!/usr/bin/env php
<?php
/**
 * This file is part of byrokrat\giroapp.
 *
 * byrokrat\giroapp is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\giroapp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\giroapp. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-18 Hannes ForsgÃ¥rd
 */

declare(strict_types = 1);

namespace byrokrat\giroapp\Console;

require __DIR__ . '/../vendor/autoload.php';

use byrokrat\giroapp\DependencyInjection\ProjectServiceContainer;
use Symfony\Component\Console\Application;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

$version = trim(file_get_contents(__DIR__ . '/../version'));

$app = new Application('GiroApp', $version);

$container = new ProjectServiceContainer;

$dispatcher = $container->get(EventDispatcherInterface::CLASS);

$app->add(new CommandWrapper($container->get(AddCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(EditCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(ExportCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(ImportCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(InitCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(LsCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(MigrateCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(RemoveCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(RevokeCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(ShowCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(StatusCommand::CLASS), $dispatcher));
$app->add(new CommandWrapper($container->get(ValidateCommand::CLASS), $dispatcher));

$app->run();
