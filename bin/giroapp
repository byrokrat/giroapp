#!/usr/bin/env php
<?php
/**
 * This file is part of byrokrat\giroapp.
 *
 * byrokrat\giroapp is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\giroapp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\giroapp. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-17 Hannes ForsgÃ¥rd
 */

declare(strict_types = 1);

namespace byrokrat\giroapp\Console;

require __DIR__ . '/../vendor/autoload.php';

use byrokrat\giroapp\DependencyInjection\ProjectServiceContainer;
use Streamer\Stream;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\ConsoleOutput;

$input = new ArgvInput;
$output = new ConsoleOutput;

$container = new ProjectServiceContainer;

$container->set(InputInterface::CLASS, $input);
$container->set('std_out', $output);
$container->set('err_out', $output->getErrorOutput());
$container->set('std_in', new Stream(STDIN));

CommandWrapper::setContainer($container);

$version = trim(file_get_contents(__DIR__ . '/../version'));

$app = new Application('GiroApp', $version);

$app->add(new CommandWrapper(AddCommand::CLASS));
$app->add(new CommandWrapper(EditCommand::CLASS));
$app->add(new CommandWrapper(ExportCommand::CLASS));
$app->add(new CommandWrapper(ImportCommand::CLASS));
$app->add(new CommandWrapper(InitCommand::CLASS));
$app->add(new CommandWrapper(LsCommand::CLASS));
$app->add(new CommandWrapper(MigrateCommand::CLASS));
$app->add(new CommandWrapper(RemoveCommand::CLASS));
$app->add(new CommandWrapper(RevokeCommand::CLASS));
$app->add(new CommandWrapper(ShowCommand::CLASS));
$app->add(new CommandWrapper(StatusCommand::CLASS));
$app->add(new CommandWrapper(ValidateCommand::CLASS));

$app->run($input, $output);
